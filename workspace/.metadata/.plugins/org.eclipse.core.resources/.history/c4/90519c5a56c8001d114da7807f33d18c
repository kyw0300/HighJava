package kr.or.ddit.basic;

import java.io.IOException;
import java.io.Reader;
import java.util.Scanner;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

// myBatis를 이용하여 DB자료를 처리하는 순서 및 방법
public class LprodMybatisTest {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		// 1. myBatis의 환경 설정 파일을 읽어와서 실행한다. (mybatis-config.xml)
		Reader rd = null;
		SqlSessionFactory sqlSessionFactory = null;
		try {
			// 1-1. 환경 설정 파일을 읽어올 스트림 객체를 생성한다.
			//		(이때 읽어올 환경설정 파일을 지정해 준다.)
			rd = Resources.getResourceAsReader("kr/or/ddit/mybatis/config/mybatis-config.xml");
			
			// 1-2. 환경 설정 파일을 읽어와 환경 설정을 완성한 후 SQL문을 호출해서 실행할 수 있는
			//		객체를 생성하는 SqlSessionFactory 객체를 생성한다.
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(rd);
			
			
			
		} catch (Exception e) {
			System.out.println("myBatis 초기화 실패!");
			e.printStackTrace();
		} finally {
			if(rd != null) try {rd.close();} catch(IOException e) {}
		}
		// ----------------------------------------------------------------------------------------------
		
		// 2. mapper에 등록된 SQL문 중에서 실행할 SQL문을 호출해서 원하는 작업을 수행한다.
		
		// SqlSession 객체 ==> 실제 SQL문을 읽어와 처리하고 결과를 얻어오는 객체
		SqlSession session = null;
		
		// 2-1. insert 작업
//		System.out.println("insert 작업 시작...");
//		
//		System.out.print("Lprod_id 입력 >> ");
//		int lprodId = scan.nextInt();
//		
//		System.out.print("Lprod_gu 입력 >> ");
//		String lprodGu = scan.next();
//		
//		System.out.print("Lprod_nm 입력 >> ");
//		String lprodNm = scan.next();
//		
//		// 입력한 데이터를 VO에 저장한다.
//		LprodVO lprodVo = new LprodVO();
//		lprodVo.setLprod_id(lprodId);
//		lprodVo.setLprod_gu(lprodGu);
//		lprodVo.setLprod_nm(lprodNm);
//		
//		try {
//			// SqlSessionFactory 객체를 이용하여 SqlSession 객체를 구한다.
//			// 		==> openSession() 메서드를 이용한다.
//			// 형식) SqlSessionFactory객체.openSession(논리값)
//			//		==> '논리값'이 true이면 'AutoCommit'이 활성화된 상태이고,
//			//		==> '논리값'이 false이면 'AutoCommit'이 비활성화된 상태이다.(기본값)
//			session = sqlSessionFactory.openSession();
//			
//			// SqlSession 객체변수를 이용하여 처리할 SQL문을 호출해서 실행한다.
//			// 형식) session.insert("namespace속성값.id속성값", 파라미터클래스)
//			//			==> 반환값 : 작업에 성공한 레코드 수
//			int insertCnt = session.insert("lprod.insertLprod", lprodVo);
//			
//			if(insertCnt > 0) {
//				System.out.println("insert 작업 성공!!!");
//			} else {
//				System.out.println("insert 작업 실패!!!");
//			}
//			
//		} finally {
//			// SqlSession을 생성할 때 AutoCommit이 비활성화된 상태일 때는 commit을 직접 실행해야 한다.
//			session.commit();
//			
//			// 작업이 완료되면 SqlSession객체를 닫아준다.
//			session.close();
//		}
		//--------------------------------------------------------------------------------------------
		
		// 2-2. update 작업
		System.out.println("update 작업 시작...");
		
		System.out.print("수정할 Lprod_gu 입력 >> ");
		String lprodGu2 = scan.next();
		
		System.out.print("새로운 Lprod_id 입력 >> ");
		int lprodId2 = scan.nextInt();
		
		System.out.print("새로운 Lprod_nm 입력 >> ");
		String lprodNm2 = scan.next();
		
		// 입력한 데이터를 VO에 저장한다.
		LprodVO lprodVo2 = new LprodVO();
		lprodVo2.setLprod_gu(lprodGu2);
		lprodVo2.setLprod_id(lprodId2);
		lprodVo2.setLprod_nm(lprodNm2);
		
		try {
			// SqlSessionFactory 객체를 이용하여 SqlSession 각체를 구한다.
			session = sqlSessionFactory.openSession();
			
			// SqlSession 객체변수를 이용하여 처리할 SQL문을 호출해서 실행한다.
			// 형식) session.update("namespace속성값.id속성값", 파라미터클래스)
			//			==> 반환값 : 작업에 성공한 레코드 수
			int updateCnt = session.update("lprod.updateLprod",lprodVo2);
			if(updateCnt > 0) {
				System.out.println("update 작업 성공!!!");
			} else {
				System.out.println("update 작업 실패!!!");
			}
			
		} finally {
			// SqlSession을 생성할 때 AutoCommit이 비활성화된 상태일 때는 commit을 직접 실행해야 한다.
			session.commit();
						
			// 작업이 완료되면 SqlSession객체를 닫아준다.
			session.close();
		}
	}
}
